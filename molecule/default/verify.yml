---

- name: Verify default
  hosts: all

  tasks:
    - name: Check if 'users_group' exists.
      group:
        name: users
        state: present
      register: users_group_out
      failed_when: users_group_out.changed
      check_mode: true

    - name: Check if group creation works.
      group:
        name: group2
        gid: 1991
        state: present
      register: group_out
      failed_when: group_out.changed
      check_mode: true

    - name: Check if user with minimal config and defaults exists.
      user:
        name: hjanmaat
        comment: Hein Janmaat
        group: hjanmaat
        home: /home/hjanmaat
        shell: /bin/bash
        state: present
      register: min_config_out
      failed_when: min_config_out.changed
      check_mode: true

    - name: Check if setting uid and 'users_group' works.
      user:
        name: user1
        uid: 1337
        group: users
        state: present
      register: uid_out
      failed_when: uid_out.changed
      check_mode: true

    - name: Check if existing groups are kept.
      user:
        name: user2
        groups:
          - group1
          - group2
        state: present
      register: existing_groups_out
      failed_when: existing_groups_out.changed
      check_mode: true

    - name: Check if password and non unique uid works.
      user:
        name: user3
        uid: 33
        password: >-
          $6$mysecretsalt$qJbapG68nyRab3gxvKWPUcs2g3t0oMHSHMnSKecYNpSi3CuZm.GbBqXO8BE6EI6P1JUefhA0qvD7b5LSh./PU1
        state: present
      register: pass_out
      failed_when: pass_out.changed
      check_mode: true

    - name: Check if generated ssh key for 'user4' exists.
      file:
        group: user4
        mode: 0600
        owner: user4
        path: /home/user4/.ssh/id_rsa
        state: file
      register: ssh_out
      failed_when: ssh_out.changed
      check_mode: true

    - name: Check content of public ssh key for 'user4'.
      command: cat /home/user4/.ssh/id_rsa.pub
      register: public_ssh_out
      changed_when: false
      failed_when: "'ansible-generated for user4 on instance' not in public_ssh_out.stdout"

    - name: Check if bits and type of ssh key for 'user4' are correct.
      command: ssh-keygen -l -f /home/user4/.ssh/id_rsa
      register: ssh_keygen_out
      changed_when: false
      failed_when:
          - "'2048' not in ssh_keygen_out.stdout"
          - "'RSA' not in ssh_keygen_out.stdout"

    - name: Get id output for 'system_user1'.
      command: id -u system_user1
      register: id_out
      changed_when: false

    - name: Check if creation of system user was successful.
      assert:
        that: id_out.stdout | int < 1000

    - name: Check if user 'foo' is absent.
      user:
        name: foo
        state: absent
      register: user_foo_out
      failed_when: user_foo_out.changed
      check_mode: true

    - name: Check if home dir of 'foo' is absent.
      file:
        path: /home/foo
        state: absent
      register: home_absent_out
      failed_when: home_absent_out.changed
      check_mode: true

    - name: Check if home dir of 'user5' has correct permissions.
      file:
        group: root
        mode: 0700
        owner: root
        path: /home/user5
        state: file
      register: home_perm_out
      failed_when: home_perm_out.changed
      check_mode: true

    - name: Check if 'authorized_keys' for 'user6' exists exclusively.
      copy:
        dest: /home/user6/.ssh/authorized_keys
        group: user6
        mode: 0600
        owner: user6
        src: test_authorized_keys_file
      register: auth_keys_out
      failed_when: auth_keys_out.changed
      check_mode: true

    - name: Check if 'authorized_keys' for 'user7' exists not exclusively.
      copy:
        dest: /home/user7/.ssh/authorized_keys
        group: user7
        mode: 0600
        owner: user7
        src: test_authorized_keys_file2
      register: auth_keys2_out
      failed_when: auth_keys2_out.changed
      check_mode: true
